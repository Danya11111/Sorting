/*Цифровая сортировка
* 
Время O(d*(n + k)) Память O(d*(n + k))

Если использовать другую сортировку в 
качестве основной, можно достичь сложности O(d*n).

Данную сортировку можно отнести к множеству 
стабильных алгоритмов сортировки, поскольку 
она не меняет порядка элементов, когда это не нужно.
*/
#include "Sortirovki.h"

void countSort(int* arr, int n, int exp)
{
    int* output = new int[n];
    int count[10] = { 0 }; // выделяем память под массив частот размером 10, так как используем 10-чную систему счисления

    // вычисление разряда элемента arr[i] выполняет выражение 
    // (arr[i] / exp) % 10
    for (int i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;  // вычисляем значение разряда и считаем его частоту

    for (int i = 1; i < 10; i++)
        count[i] += count[i - 1];

    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    for (int i = 0; i < n; i++)
        arr[i] = output[i];
}

void Radix_sort(int* arr, int n)
{
    int m = getMax(arr, n); // находим максимальное число
    // выполняем сортировку массива, пока не дойдем до старшего разряда наибольшего числа 

    int exp = 1;
    while (m / 10 > 0) {
        countSort(arr, n, exp);
        m /= 10;
        exp *= 10;
    }
    countSort(arr, n, exp);
}