/* Быстрая сортировка

Время Память

Этот алгоритм считается одним из самых быстрых алгоритмов,
используемых на практике. Конечно, в своей оригинальной 
реализации имеет недостатки, но они исправимы некоторыми 
модификациями.
*/

void swappp(int* a, int* b) // функция для смены местами двух значений
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int* arr, int low, int high)
{
    int pivot = arr[high];    // опорный элемент
    int i = (low - 1);  // индекс наименьшего элемента
    for (int j = low; j <= high - 1; j++)
    {
        // если текущий элемент меньше или равен опорнуму
        if (arr[j] <= pivot)
        {
            i++;    // увеличиваем индекс минимального элемента
            swappp(&arr[i], &arr[j]);
        }
    }
    swappp(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void Quick_sort(int* arr, int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high); // индекс опорного элемента
        // ваш код, выпоняющий корректные рекурсивыне вызовы для правой и левой частей входного массива
        Quick_sort(arr, low, pi - 1); // сортируем левую часть
        Quick_sort(arr, pi + 1, high);
    }
}
